---
title: "M√≥dulo 3: SDAR y PBDB"
author: "David Caro, GIPHIN"
date: "06/14/2025"
format: 
  pdf:
    toc: true
  html:
    toc: true
    code-background: true
editor: visual
---

# Columnas estratigr√°ficas con SDAR

```{r}
#| message: false
#| warning: false
#| echo: true
# Vamos a cargar algunos de los paquetes a usar
#install.packages("paleobioDB")
#install.packages("SDAR")
#install.packages("readxl")
library(tidyverse)
library(ggplot2) 
library(psych)
library(SDAR)
library(readxl) 
library(paleobioDB)
```

## ¬øQu√© es SDAR?

`SDAR` (*Stratigraphic Data Analysis in R*) es un paquete de `R` dise√±ado para facilitar el **an√°lisis y la visualizaci√≥n de columnas estratigr√°ficas (SC)**. Estas columnas se utilizan ampliamente en geolog√≠a y paleontolog√≠a para representar:

-   Tama√±o de grano

-   Grosor de unidades

-   Componentes litol√≥gicos

-   Contenido f√≥sil

-   Estructuras sedimentarias

Tradicionalmente estas columnas se dibujan a mano en programas como Illustrator, Inkscape, CorelDRAW o Grpher. SDAR automatiza este proceso de manera reproducible y con c√≥digo abierto. SDAR permite exportar las columnas realizadas a un formato vectorizado haciendo que sea muy f√°cil luego editar las columnas y as√≠ cambiar sus est√©tica.

SDAR fue creado por John Ortiz y Carlos Jaramillo, la publicaci√≥n sobre le paquete SDAR al igual que los archivos adjuntos se puede encontrar [aqu√≠](https://cran.r-project.org/web/packages/SDAR/vignettes/introduction_to_SDAR.html).

## Instalaci√≥n

`SDAR` as√≠ como sus dependencias se pueden instalar directamende desde `CRAN`:

``` r
install.packages("SDAR")
install.packages("readxl")
```

## Flujo de trabajo t√≠pico

1.  üì• **Importaci√≥n de datos** (plantillas Excel, bases de datos o archivos planos).

2.  ‚úÖ **Validaci√≥n** del formato y estructura.

3.  üìä **Visualizaci√≥n** de la columna como archivo PDF.

4.  üé® **Personalizaci√≥n**: estructuras sedimentarias, f√≥siles, bioturbaci√≥n, etc.

5.  üìà **An√°lisis de datos**: estad√≠sticas de litolog√≠as, conteo de f√≥siles, etc.

Para mayor facilidad los creadores de SDAR publicaron archivos de excel con el template para usarse en SDAR y que as√≠ no se tenga ning√∫n problema al cargar los datos.

## Carga de datos

El paquete `SDAR` ya tiene un dataset y se puede usar facilmente pero vamos a abrir los archivos `.xlsx` para entender como se es el proceso habitual.

Se cargan dos archivos una de capas y otro de intervalos

```{r}
# Para obtener ayuda sobre el formato de los datos
# vignette("SDAR_data_model")

# data(saltarin_beds) carga el dataset de ejmplo
# Tambien se puede cargar con: 
# system.file("extdata", "SDAR_v0.95_beds_saltarin.xlsx", package = "SDAR")
# system.file("extdata", "SDAR_v0.95_intervals_saltarin.xlsx", package = "SDAR")

# Leemos el archivo de capas 
capas <- read_excel("datos/SDAR_v0.95_beds_saltarin.xlsx")

# Vamos a darle un vistazo a los datos
str(capas)
nrow(capas)
names(capas)

# Al usar SDAR los datos de capas tiene que validarse pasandolos a la clase strata
# datum indica si el sentido de las capas, base en afloramiento
capas_val <- strata(capas, datum ="top") # top ya que es un core

```

Veamos un resumen de las capas validadas

```{r}
# El argumento grain.size permite imprimir el resumen de
# la litolog√≠a por tama√±o de grano
summary(capas_val, grain.size=TRUE)
```

## Graficar capas y a√±adir datos de intervalos

SDAR no grafica como otros paquetes ya que su salida es siempre un archivo pdf vectorizado.

En cuanto a los intervalos `SDAR` tiene varias opciones y se deben cargar y seleccionar manualmente cuales se incluyen en la grafica, estos datos pueden ser:

| **Nombre en SDAR (argumento)** | **Significado** |
|----|----|
| ncore | n√∫mero de testigo (n√∫cleo de perforaci√≥n) |
| samples | muestras |
| visual_oil_stain | mancha de petr√≥leo visible |
| bioturbation | bioturbaci√≥n (actividad biol√≥gica en sedimentos) |
| sed.structures | estructuras sedimentarias |
| fossils | f√≥siles |
| other.sym | otros s√≠mbolos |
| lithostrat | litostratigraf√≠a (unidades seg√∫n litolog√≠a) |
| chronostrat | cronostratigraf√≠a (unidades seg√∫n edad geol√≥gica) |

```{r}
# La funci√≥n plot() genera un archivo pdf, al no tener m√°s valores
# se crea el archivo con los valores por defecto

#plot(capas_val)

# subset.base y subset.top permiten elegir que parte se desea graficar
# Vamos a cargar todos los datos de los intervalos

# Cargamos el archivo de intervalos 
intervalos <- "datos/SDAR_v0.95_intervals_saltarin.xlsx"

# Al leer el archivo de intervalos solo se carga la primera hoja
str(read_excel(intervalos))

# Vamos a cargar todos los valores de intervalos

#n√∫mero de testigo
core_number_dat <- read_excel(intervalos, sheet = "core_number") 
#muestras
samples_dat <- read_excel(intervalos, sheet = "samples") 
#estructuras sedimentarias
sed_structures_dat <- read_excel(intervalos, sheet = "sed_structures") 
#bioturbaci√≥n
biot_dat <- read_excel(intervalos, sheet = "bioturbation") 
#f√≥siles
fossils_dat <- read_excel(intervalos, sheet = "fossils") 
#otros s√≠mbolos
other_symbols_dat <- read_excel(intervalos, sheet = "other_symbols") 
#litostratigraf√≠a
lito_dat <- read_excel(intervalos, sheet = "lithostra") 
#cronostratigraf√≠a
crono_dat <- read_excel(intervalos, sheet = "chronostra") 
#metadatos
meta_dat <- read_excel(intervalos, sheet = "metadata") 

meta_dat
```

## Componer y exportar la columna final

Para componer el resultado final se usa la funci√≥n `plot()` la cual lleva una gran cantidad de argumentos entre los cuales se encuentran:

-   `subset.base` permite elegir el l√≠mite inferior a graficar.

-   `subset.top` permite elegir el l√≠mite superior a graficar.

-   `plot_order` declara el orden para graficar los diferentes datos.

-   `scale` declara la escala de la columna.

-   `symbols.size` declara el tama√±o de los s√≠mbolos al graficar la columna.

```{r}
#| eval: false
v_order <- c( "chronostrat","lithostrat","samples","bed.number","barscale","ncore",
              "lithology","fossils","sed.structures","bioturbation","other.sym") 

plot(capas_val, data.units="meters",
    file.name = "prueba_SDAR",
    subset.base=600, subset.top=550, 
    bioturbation=biot_dat,
    fossils=fossils_dat, 
    sed.structures=sed_structures_dat,
    other.sym=other_symbols_dat, 
    samples=samples_dat, 
    ncore=core_number_dat, 
    lithostrat=lito_dat, 
    chronostrat=crono_dat, 
    symbols.size=0.8,
    plot.order = v_order,
    scale = 100)
```

::: callout-important
## Ejercicio

Crea tu propia columna cmabiando el orden de los datos, la escala, la cantidad de datos y el rango.
:::

# **Paleobiology Database**

La [Paleobiology Database (PBDB)](https://paleobiodb.org) es la base de datos m√°s grande del mundo de datos paleontol√≥gicos.

El paquete `paleobioDB` permite acceder de forma sencilla, reproducible y flexible a los datos paleontol√≥gicos disponibles en la [Paleobiology Database (PBDB)](https://paleobiodb.org). Est√° dise√±ado tanto para realizar consultas directas como para visualizar datos en sus dimensiones **espaciales, temporales y taxon√≥micas**.

## Uso b√°sico

El paquete est√° organizado en dos grupos de funciones:

1.  **Funciones base:** conectan directamente con la API de PBDB (por ejemplo `pbdb_occurrences()`).

2.  **Funciones de an√°lisis:** facilitan la exploraci√≥n de datos en aspectos taxon√≥micos, geogr√°ficos y temporales.

## Descargando informaci√≥n del API

El paquete posee varias funciones para

El paquete `paleobioDB` permite hacer consultas flexibles a la *Paleobiology Database* (PBDB), enfocadas en:

-   Ocurrencias f√≥siles

-   Informaci√≥n taxon√≥mica

-   Estratigraf√≠a

-   Referencias bibliogr√°ficas, entre otros

Estas funciones permiten **descargar datos paleontol√≥gicos estructurados directamente a R** para su an√°lisis.

### Funciones principales y su utilidad

| Funci√≥n | ¬øQu√© hace? | Ejemplo |
|------------------------|------------------------|------------------------|
| `pbdb_taxon()` | Muestra informaci√≥n detallada de un tax√≥n (autor, a√±o, aparici√≥n, tama√±o) | `pbdb_taxon (name = "chelus" ,vocab = "pbdb", show = c("attr","app", "size"))` |
| `pbdb_ref_taxa()` | Devuelve referencias asociadas a un tax√≥n | `pbdb_ref_taxa (name = "felidae")` |
| `pbdb_collections()` | Muestra informaci√≥n de las colecciones que contienen el item buscado | `pbdb_collections(limit=100, base_name="cetacea")` |
| `pbdb_intervals()` | Devuelve informaci√≥n sobre todos los intervalos de tiempo en el rango seleccionado | `pbdb_intervals(min_ma = 0,max_ma = 2)` |
| `pbdb_occurrences()` | Descarga registros f√≥siles en forma de `dataframe` (ubicaci√≥n, edad, tax√≥n, etc.) | `pbdb_occurrences (limit="all", base_name ="porifera", show = "coords")` |

Hay un total de 19 funciones para consultar y descargar datos, todas las funciones tienen la misma estructura.

las funciones de ayuda en R (`?pbdb_occurrences`) ofrecen ejemplos y los par√°metros m√°s comunes.

-   Tambi√©n puedes consultar la documentaci√≥n completa de la API en:\
    üëâ <http://paleobiodb.org/data1.2/>

### Consulta de ocurrencias de un grupo

Vamos a consultar las ocurrencias de un grupo y todos los taxones hijos de este durante un periodo temporal, algunos taxones que podemos buscar:

-   Rodentia (Orden de los roedores).

-   Cryptodira ( Suborden de tortugas, donde se encuentra la mayor√≠a de las tortugas marinas y terrestres).

-   Felidae (Familia de los felinos).

-   [Rotaliida](https://www.marinespecies.org/aphia.php?p=taxdetails&id=163158) (Orden de foramin√≠feros)

-   Radiolaria (Phylum de los radiolarios).

-   Bivalvia (Clase de moluscos con dos valvas ).

-   Ammonitida (Orden de moluscos donde est√°n las amonitas).

```{r}
# Descargar todos los registros de datos_taxa del intervalo Cuaternario
datos_taxa <- pbdb_occurrences(
  # base_name devuleve todos los taxones "hijos",
  # taxon_name solo devulve el taxon espec√≠fico
  
  base_name = "Ammonitida",       # Grupo taxon√≥mico
  interval = "Campanian",     # Intervalo geol√≥gico
  vocab = "pbdb",              # Vocabulario est√°ndar PBDB
  limit = "all",               # Traer todos los registros
  # Incluir coordenadas, clasificaci√≥n extendida, etc.
  show = c("coords", "classext", "ident")  
)

#
str(datos_taxa)

print(unique(datos_taxa$family))
```

## Analizar y graficar informaci√≥n

El paquete posee funciones permiten **visualizar y analizar** los datos obtenidos desde la Paleobiology Database, explorando su dimensi√≥n **temporal, taxon√≥mica y espacial**. Estas funciones aceptan un objeto `dataframe`, en este caso `datos_taxa`.

| **Funci√≥n** | **¬øQu√© hace?** | **Ejemplo** |
|------------------|----------------------------|---------------------------|
| `pbdb_map()` | Muestra un mapa con las ocurrencias f√≥siles. | `pbdb_map(datos_taxa, main = "Ocurrencias", pch = 19, cex = 0.7)` |
| `pbdb_map_occur()` | Muestra el esfuerzo de muestreo (n√∫mero de registros por celda geogr√°fica). | `pbdb_map_occur(datos_taxa, res = 5)` |
| `pbdb_map_richness()` | Muestra la riqueza (diversidad) de especies/g√©neros por localidad. | `pbdb_map_richness(datos_taxa, rank = "species")` |
| `pbdb_richness()` | Grafica la riqueza (n√∫mero de especies, g√©neros, etc.) a lo largo del tiempo. | `pbdb_richness(datos_taxa, rank = "species", temporal_extent = c(0, 10), res = 1)` |
| `pbdb_orig_ext()` | Muestra las tasas de origen y extinci√≥n en el tiempo. | `pbdb_orig_ext(datos_taxa, rank = "genus", temporal_extent = c(0, 10), res = 1, orig_ext = 1)` |
| `pbdb_temp_range()` | Grafica el rango temporal (aparici√≥n-extinci√≥n) de los taxones en el conjunto de datos. | `pbdb_temp_range(datos_taxa, rank = "species", names = FALSE)` |
| `pbdb_subtaxa()` | Lista y grafica la cantidad de subgrupos taxon√≥micos (especies, g√©neros, familias, etc.). | `pbdb_subtaxa(datos_taxa)` |
| `pbdb_temporal_resolution()` | Mide y grafica la resoluci√≥n temporal de los registros f√≥siles (en millones de a√±os). | `pbdb_temporal_resolution(datos_taxa)` |

```{r}
#| label: bar-plot-taxa-temp-range
#| fig-cap: "Histogramas de los taxones de Amonitas"

# Ver resoluci√≥n temporal de los registros
pbdb_subtaxa(datos_taxa, col = "cyan3")

# Visualizar el rango temporal de g√©neros
#pbdb_temp_range(datos_taxa, rank = "genus", col = "cyan3", names = FALSE)
```

Otras de las funciones √∫tiles para explorar los datos son las siguientes:

``` r
# Riqueza de especies a lo largo del tiempo
pbdb_richness(datos_taxa, rank = "species", res = 2, 
              temporal_extent = c(65, 95))

# Tasa de origen (especiaci√≥n)
pbdb_orig_ext(datos_taxa, rank = "species", temporal_extent = c(65, 95), 
              res = 1, orig_ext = 1)

# Tasa de extinci√≥n
pbdb_orig_ext(datos_taxa, rank = "species", temporal_extent = c(65, 95), 
              res = 1, orig_ext = 2)
```

Hagamos un mapa con las ocurrencias de f√≥siles de Amonitas durante el Campaniano usando las funciones del paquete

```{r}
#| label: mapa-amonitas-campaniano
#| fig-cap: "Mapa de Amonitas del Campaniano"
# Mapa de ocurrencias f√≥siles
pbdb_map(datos_taxa, main = "F√≥siles de Amonitas del Campaniano", 
         pch = 19, cex = 0.7)

# Mapa del esfuerzo de muestreo
# pbdb_map_occur(datos_taxa, res = 5)

# Mapa de riqueza de especies
# pbdb_map_richness(datos_taxa, rank = "species", res = 5)

```

Las funciones de an√°lisis y exploraci√≥n del paquete son buenas pero muy limitadas y las gr√°ficas que produce son de baja calidad y muy poco flexibles, por lo mismo la mayor √∫tilidad del paquete reside en importar datos.

::: callout-important
## Ejercicio

Importa los datos de alguno de los taxones propuestos para el Mioceno (en el caso de Ammonitida seleccionar un piso del Cret√°cico), usando las funciones de `Tidyverse` organiza rapidamente los datos y crea un diagrama de barras con `ggplot` para los g√©neros.

-   Usa la funci√≥n `as_tibble()` para convertir el dataframe generado en un Tibble y operarlo m√°s facilmente.

-   ¬øCu√°ntos g√©neros o especies hay?

-   Filtra los valores NA para el g√©nero y selecciona las 10 m√°s comunes.
:::

```{r}
#| label: g√©neros-roedores
#| fig-cap: "Gr√°fica de registros de g√©neros de roedores del Mioceno"
#| warning: false
#| code-fold: true


# 1. Descargar datos del grupo elegido (por ejemplo: Rodentia)
rodentia <- pbdb_occurrences(
  base_name = "Rodentia",
  interval = "Miocene",
  limit = "all",
  vocab = "pbdb",
  show = c("coords", "classext", "ident")
)

# 2. Convertir a tibble y explorar
rodentia_tbl <- as_tibble(rodentia)
glimpse(rodentia_tbl)

# print(unique(rodentia_tbl$genus))

# 3. Contar g√©neros, filtrar los NA, ordenar y seleccionar los 10 m√°s comunes
top_generos <- rodentia_tbl %>%
  filter(!is.na(genus)) %>%
  count(genus, sort = TRUE) %>%
  slice_max(n, n = 10)

# 4. Crear diagrama de barras con ggplot2
ggplot(top_generos, aes(x = reorder(genus, n), y = n)) +
  # Seleccionar diagrama de barras y a√±adir el conteo
  geom_col(fill = "aquamarine3",colour = "gray",alpha = 0.8) +
  geom_text(aes(label = n), hjust = 1.5, colour = "white")+
  labs(
    title = "G√©neros f√≥siles m√°s comunes de Rodentia (Mioceno)",
    x = "G√©nero",
    y = "N√∫mero de registros"
  ) +
  coord_flip() +
  theme_gray()

```
