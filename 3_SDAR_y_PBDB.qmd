---
title: "M√≥dulo 3: SDAR y PBDB"
author: "David Caro, GIPHIN"
date: "06/14/2025"
format: 
  html:
      toc: true
      code-background: true
editor: visual
---

# Columnas estratigr√°ficas con SDAR

```{r}
#| message: false
#| warning: false
#| echo: true
# Vamos a cargar algunos de los paquetes a usar
#install.packages("paleobioDB")
#install.packages("SDAR")
#install.packages("readxl")
library(tidyverse)
library(ggplot2) 
library(psych)
library(SDAR)
library(readxl) 
library(paleobioDB)
```

## ¬øQu√© es SDAR?

`SDAR` (*Stratigraphic Data Analysis in R*) es un paquete de `R` dise√±ado para facilitar el **an√°lisis y la visualizaci√≥n de columnas estratigr√°ficas (SC)**. Estas columnas se utilizan ampliamente en geolog√≠a y paleontolog√≠a para representar:

-   Tama√±o de grano

-   Grosor de unidades

-   Componentes litol√≥gicos

-   Contenido f√≥sil

-   Estructuras sedimentarias

Tradicionalmente estas columnas se dibujan a mano en programas como Illustrator, Inkscape, CorelDRAW o Grpher. SDAR automatiza este proceso de manera reproducible y con c√≥digo abierto. SDAR permite exportar las columnas realizadas a un formato vectorizado haciendo que sea muy f√°cil luego editar las columnas y as√≠ cambiar sus est√©tica.

SDAR fue creado por John Ortiz y Carlos Jaramillo, la publicaci√≥n sobre le paquete SDAR al igual que los archivos adjuntos se puede encontrar [aqu√≠](https://cran.r-project.org/web/packages/SDAR/vignettes/introduction_to_SDAR.html).

## Instalaci√≥n

`SDAR` as√≠ como sus dependencias se pueden instalar directamende desde `CRAN`:

``` r
install.packages("SDAR")
install.packages("readxl")
```

## Flujo de trabajo t√≠pico

1.  üì• **Importaci√≥n de datos** (plantillas Excel, bases de datos o archivos planos).

2.  ‚úÖ **Validaci√≥n** del formato y estructura.

3.  üìä **Visualizaci√≥n** de la columna como archivo PDF.

4.  üé® **Personalizaci√≥n**: estructuras sedimentarias, f√≥siles, bioturbaci√≥n, etc.

5.  üìà **An√°lisis de datos**: estad√≠sticas de litolog√≠as, conteo de f√≥siles, etc.

Para mayor facilidad los creadores de SDAR publicaron archivos de excel con el template para usarse en SDAR y que as√≠ no se tenga ning√∫n problema al cargar los datos.

## Carga de datos

El paquete `SDAR` ya tiene un dataset y se puede usar facilmente pero vamos a abrir los archivos `.xlsx` para entender como se es el proceso habitual.

Se cargan dos archivos una de capas y otro de intervalos

```{r}
# Para obtener ayuda sobre el formato de los datos
# vignette("SDAR_data_model")

# data(saltarin_beds) carga el dataset de ejmplo
# Tambien se puede cargar con: 
# system.file("extdata", "SDAR_v0.95_beds_saltarin.xlsx", package = "SDAR")
# system.file("extdata", "SDAR_v0.95_intervals_saltarin.xlsx", package = "SDAR")

# Leemos el archivo de capas 
capas <- read_excel("datos/SDAR_v0.95_beds_saltarin.xlsx")

# Vamos a darle un vistazo a los datos
str(capas)
nrow(capas)
names(capas)

# Al usar SDAR los datos de capas tiene que validarse pasandolos a la clase strata
# datum indica si el sentido de las capas, base en afloramiento
capas_val <- strata(capas, datum ="top") # top ya que es un core

```

Veamos un resumen de las capas validadas

```{r}
# El argumento grain.size permite imprimir el resumen de
# la litolog√≠a por tama√±o de grano
summary(capas_val, grain.size=TRUE)
```

## Graficar capas y a√±adir datos de intervalos

SDAR no grafica como otros paquetes ya que su salida es siempre un archivo pdf vectorizado.

En cuanto a los intervalos `SDAR` tiene varias opciones y se deben cargar y seleccionar manualmente cuales se incluyen en la grafica, estos datos pueden ser:

| **Nombre en SDAR (argumento)** | **Significado** |
|------------------------|------------------------------------------------|
| ncore | n√∫mero de testigo (n√∫cleo de perforaci√≥n) |
| samples | muestras |
| visual_oil_stain | mancha de petr√≥leo visible |
| bioturbation | bioturbaci√≥n (actividad biol√≥gica en sedimentos) |
| sed.structures | estructuras sedimentarias |
| fossils | f√≥siles |
| other.sym | otros s√≠mbolos |
| lithostrat | litostratigraf√≠a (unidades seg√∫n litolog√≠a) |
| chronostrat | cronostratigraf√≠a (unidades seg√∫n edad geol√≥gica) |

```{r}
# La funci√≥n plot() genera un archivo pdf, al no tener m√°s valores
# se crea el archivo con los valores por defecto

#plot(capas_val)

# subset.base y subset.top permiten elegir que parte se desea graficar
# Vamos a cargar todos los datos de los intervalos

# Cargamos el archivo de intervalos 
intervalos <- "datos/SDAR_v0.95_intervals_saltarin.xlsx"

# Al leer el archivo de intervalos solo se carga la primera hoja
str(read_excel(intervalos))

# Vamos a cargar todos los valores de intervalos

core_number_dat <- read_excel(intervalos, sheet = "core_number") #n√∫mero de testigo

samples_dat <- read_excel(intervalos, sheet = "samples") #muestras

sed_structures_dat <- read_excel(intervalos, sheet = "sed_structures") #estructuras sedimentarias

biot_dat <- read_excel(intervalos, sheet = "bioturbation") #bioturbaci√≥n

fossils_dat <- read_excel(intervalos, sheet = "fossils") #F√≥siles

other_symbols_dat <- read_excel(intervalos, sheet = "other_symbols") #otros s√≠mbolos

lito_dat <- read_excel(intervalos, sheet = "lithostra") #litostratigraf√≠a

crono_dat <- read_excel(intervalos, sheet = "chronostra") #cronostratigraf√≠a

meta_dat <- read_excel(intervalos, sheet = "metadata") #metadatos

meta_dat
```

## Componer y exportar la columna final

Para componer el resultado final se usa la funci√≥n `plot()` la cual lleva una gran cantidad de argumentos entre los cuales se encuentran:

-   `subset.base` permite elegir el l√≠mite inferior a graficar.

-   `subset.top` permite elegir el l√≠mite superior a graficar.

-   `plot_order` declara el orden para graficar los diferentes datos.

-   `scale` declara la escala de la columna.

-   `symbols.size` declara el tama√±o de los s√≠mbolos al graficar la columna.

```{r}
#| eval: false
v_order <- c( "chronostrat","lithostrat","samples","bed.number","barscale","ncore","lithology","fossils","sed.structures","bioturbation","other.sym") 

plot(capas_val, data.units="meters",
    file.name = "prueba_SDAR",
    subset.base=600, subset.top=550, 
    bioturbation=biot_dat,
    fossils=fossils_dat, 
    sed.structures=sed_structures_dat,
    other.sym=other_symbols_dat, 
    samples=samples_dat, 
    ncore=core_number_dat, 
    lithostrat=lito_dat, 
    chronostrat=crono_dat, 
    symbols.size=0.8,
    plot.order = v_order,
    scale = 100)
```

::: callout-important
## Ejercicio

Crea tu propia columna cmabiando el orden de los datos, la escala, la cantidad de datos y el rango.
:::

# **Paleobiology Database**

![](images/clipboard-3834988539.png)

La Paleobiology Database es la base de datos m√°s grande del mundo de datos paleontol√≥gicos (Imagen tomada de [Paleobiology Database (PBDB)](https://paleobiodb.org) ).

El paquete `paleobioDB` permite acceder de forma sencilla, reproducible y flexible a los datos paleontol√≥gicos disponibles en la [Paleobiology Database (PBDB)](https://paleobiodb.org). Est√° dise√±ado tanto para realizar consultas directas como para visualizar datos en sus dimensiones **espaciales, temporales y taxon√≥micas**.

## Uso b√°sico

El paquete est√° organizado en dos grupos de funciones:

1.   **Funciones base:** conectan directamente con la API de PBDB (por ejemplo `pbdb_occurrences()`).

2.   **Funciones de an√°lisis:** facilitan la exploraci√≥n de datos en aspectos taxon√≥micos, geogr√°ficos y temporales.

```{r}
# Descargar todos los registros de Canidae del intervalo Cuaternario
canidae <- pbdb_occurrences(
  base_name = "Canidae",       # Grupo taxon√≥mico
  interval = "Quaternary",     # Intervalo geol√≥gico
  vocab = "pbdb",              # Vocabulario est√°ndar PBDB
  limit = "all",               # Traer todos los registros
  show = c("coords", "classext", "ident")  # Incluir coordenadas, clasificaci√≥n extendida, etc.
)

# Ver resoluci√≥n temporal de los registros
pbdb_temporal_resolution(canidae)

# Visualizar el rango temporal de g√©neros
pbdb_temp_range(canidae, rank = "genus", names = FALSE)
```

```{r}
# Riqueza de especies a lo largo del tiempo
pbdb_richness(canidae, rank = "species", temporal_extent = c(0, 10), res = 1)

# Tasa de origen (especiaci√≥n)
pbdb_orig_ext(canidae, rank = "species", temporal_extent = c(0, 10), res = 1, orig_ext = 1)

# Tasa de extinci√≥n
pbdb_orig_ext(canidae, rank = "species", temporal_extent = c(0, 10), res = 1, orig_ext = 2)

```

```{r}
#| eval: false
# Mapa de ocurrencias f√≥siles
pbdb_map(canidae, main = "F√≥siles de Canidae", pch = 19, cex = 0.7)

# Mapa del esfuerzo de muestreo
pbdb_map_occur(canidae, res = 5)

# Mapa de riqueza de especies
pbdb_map_richness(canidae, rank = "species", res = 5)

```
