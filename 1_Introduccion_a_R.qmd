---
title: "Módulo 1: Introducción a R, tipos de datos y estructuras básicas"
author: "David Caro, GIPHIN"
date: "06/14/2025"
format:
  html: 
    code-background: true
editor: visual
---

# Introducción

Este capítulo introduce R como lenguaje de programación enfocado en el análisis de datos. Aprenderemos los tipos de objetos más comunes, cómo crear funciones simples, estructuras de control básicas y cómo importar y explorar conjuntos de datos reales.

# ¿Qué es R?

**R** es un lenguaje de código abierto utilizado ampliamente en estadística, ciencia de datos y análisis científico. En paleontología y geología, permite analizar y visualizar datos de manera reproducible.

# R es (básicamente) una calculadora

De mayor a menor precedencia:

1.  Paréntesis: `(`, `)`

2.  Exponente: `^` o `**`

3.  División: `/`

4.  Multiplicación: `*`

5.  Suma: `+`

6.  Resta `-`

R permite hacer todo tipo de operaciones y comparaciones a los objetos que usemos

```{r}
log10(10)
567 / 4
sin(1)
1 == 1
1 != 2 
1 >= -9
5 < 3
```

## Operadores aritméticos en R

| Precedencia            | Operador   | Descripción     | Ejemplo             |
|------------------------|------------|-----------------|---------------------|
| 0 (siempre va primero) | `( )`      | Paréntesis      | 2 \* `(3 + 4)` → 14 |
| 1 (alta)               | `^` o `**` | Potencia        | `2 ^ 3` → 8         |
| 2                      | `-`        | Negación        | `-5` → -5           |
| 3                      | `*`        | Multiplicación  | `4 * 2` → 8         |
| 3                      | `/`        | División real   | `8 / 2` → 4         |
| 3                      | `%%`       | Módulo (resto)  | `10 %% 3` → 1       |
| 3                      | `%/%`      | División entera | `10 %/% 3` → 3      |
| 4 (baja)               | `+`        | Suma            | `3 + 5` → 8         |
| 4                      | `-`        | Resta           | `7 - 2` → 5         |

## Operadores lógicos en R

| Operador | Nombre | Descripción | Ejemplo |
|------------------|------------------|------------------|------------------|
| `<` | Menor que | Compara si un valor es menor | `5 < 10` → `TRUE` |
| `<=` | Menor o igual |  | `5 <= 5` → `TRUE` |
| `>` | Mayor que |  | `10 > 3` → `TRUE` |
| `>=` | Mayor o igual |  | `4 >= 4` → `TRUE` |
| `==` | Igual a | Comparación de igualdad | `3 == 3` → `TRUE` |
| `!=` | Distinto de |  | `5 != 4` → `TRUE` |
| `&` | Y lógico (elemento a elemento) | Ambos deben ser verdaderos | `TRUE & FALSE` → `FALSE` |
| `|` | O lógico (elemento a elemento) | Uno de los dos debe ser verdadero | `c(TRUE, FALSE, FALSE)| c(TRUE, TRUE, FALSE)` → `TRUE  TRUE  FALSE` |
| `&&` | Y lógico (primer elemento) | Solo compara el primer valor | `c(TRUE, FALSE) && c(TRUE, TRUE)` → `TRUE` |
| `||` | O lógico (primer elemento) | Solo compara el primer valor | `c(TRUE, FALSE, TRUE) || c(FALSE, TRUE, FALSE)`→ `TRUE` |
| `%in%` | Se encuentra en | Evalua si el valor está presente en la matriz | `"a" %in% c ("b", "b", "a", "x","b","x")` → `TRUE` |
| `!` | Negación lógica | Invierte el valor lógico | `!TRUE` → `FALSE` |

# Variables y tipos de datos

``` r
# Asignación de variables
edad <- 120
formacion <- "Rosa Blanca"
es_marine <- TRUE

# Tipos de datos
class(edad)        # numeric
class(formacion)   # character
class(es_marine)   # logical
```

## Vectores y factores matrices

```{r}
# Crear vectores
litologias <- c("micrita", "lutita", "arenita", "micrita")
unique(litologias)

# Convertir a factor
litologias <- factor(litologias)
levels(litologias)

# Operar sobre vectores
x <- 1:5
x
2^x

```

## Listas y matrices

``` r
#Las listas son como vectores pero permiten varios tipos de datos
lista <- list(1, "a", TRUE, 1+4i)
lista

lista_2 <- list(title = "Numbers", numbers = 1:10, data = TRUE )
lista_2
```

```{r}
#Las matrices son listas bidimensionales
matrix_example <- matrix(1:18, ncol=6, nrow=3)
matrix_example
dim(matrix_example)
#nrow
#ncol
```

## Dataframes

Los dataframes son los objetos más usados en R

```{r}
#Un data frame se es como una matriz pero tiene caracteristicas especiales
ratones <- data.frame(color = c("gris", "negro", "blanco"),
                      peso = c(0.4, 0.2, 0.6),
                      tiene_cria = c(1, 0, 1))                    
head(ratones)                  

#Cada columna de un df tiene puede tener una clase diferente
#las columnas se pueden indexar por su nombre
class(ratones$color)
```

# Estructuras de control

```{r}
x <- 100

# Condicional
if (x >= 50) {
  print("x es ayor o igual que 50")
} else if (x < 50) {
  print("x es mayor a 50, pero menor a 100")
} else {
  print("x es menor a 50")
}

# Bucle for
for (i in 1:3) {
  print(i)
}

# Se pueden correr bucles dentro de bucles
for(i in 1:5){
  for(j in c('a', 'b', 'c')){
    print(paste(i,j))
  }
}
```

::: callout-important
## Ejercicio

Escribe un codigo que con un vector x 1:10 evalue cada número e imprima si es par o impar
:::

```{r}
#| code-fold: true

x <- 1:10
for(i in x){
  if (i%%2 == 0){
    print(paste(i,"es par"))
  } else {
    print(paste(i,"es impar"))
  }
}
```

# Funciones

::: callout-warning
## Documentación o ayuda

Todas las funciones en R ya sean de base o de algún paquete tiene una documentación que nos explica su funcionamiento, sus argumentos y su salida.
:::

## Para ver la documentación de una función:

-   `?función`

-   `help(función)`

-   `??función` cuando no se conoce bien el nombre de la función

```{r}

# Función simple
doblar <- function(x) {
  return(x * 2)
}

doblar(5)

#Para crear un error, podemos usar la función stop() y que el codigo pare
#si las condiciones no se están cumpliendo
#R provee la función stopifnot() para no tener que crear un condicional if
```

::: callout-important
## Ejercicio

Escribe una función que convierta de grados kelvin a celsius y pare si los datos ingresados no son numericos
:::

```{r}
#| code-fold: true
#| 
kelvin_a_celsius <- function(temp) {
  stopifnot(is.numeric(temp))
  kelvin <- temp - 273.15
  rm(temp)
  return(kelvin)
}

kelvin_a_celsius(300)
```

# Paquetes de R

Un **paquete** es una colección de funciones, datos y documentación que amplía las capacidades básicas de R. Existen miles de paquetes creados por la comunidad científica para tareas específicas como visualización, análisis geoespacial, manipulación de datos, entre otros.

-   Algunos de los paquetes que vamos a usar:

    -   `Tidyverse` conjunto de paquetes para manipular y visualizar datos de forma organizada.

        -   `ggplot2` para gráficos y visualizaciones.
        -   `dplyr` para manipulación de datos.

    -   `SDAR` permite crear columnas estratigraficas facilmente.

    -   `paleoverse` conjunto de paquetes orientados a paleontología.

        -   `macrostrat` permite visualizar y cargar para datos estratigráficos.
        -   `sepkosky` permite visualizar y acceder a datos de géneros de fosiles marinos.

# Importación de datos

En R hay varias formas de importar datos, se pueden leer los archivos usando las funciones base de R, que permiten cargar diversos formatos, se pueden usar las funciones del paquete `readr` o se pueden importar por medio de un paquete que contiene un dataset.

# Explorando los datos

## Conjunto de datos: Palmer Penguins

```{r}
#| warning: false
#install.packages("palmerpenguins")
library(tidyverse)
library(palmerpenguins)

# Visualizar
head(penguins)
str(penguins)
summary(penguins)
#glimpse(penguins)
#Para tener una mejor idea de los datos seleccionamos 10 al azar
penguins[sample(nrow(penguins), 10), ]
unique(penguins$island)

```

### Entender e interactuar con los datos

```{r}
# Extraer solo ciertas filas y columnas para crear subsets
penguins[,-c(3:5)]
```

::: callout-important
## Ejercicio

Crea un data frame llamado `penguins_2009` que sea el subset de penguins, que solo tenga los datos del año 2009, que no tenga las medidas de tamaño y sin los valores NA. Usa la función `na.omit( )`
:::

```{r}
#| code-fold: true
penguins_2009 <- na.omit(penguins[penguins$year == 2009, -c(3:5)])
penguins_2009
```

## Conjunto de datos: Erupciones volcánicas en el Holoceno

setw

```{r}
volcanes <- read.csv("datos/volcanes.csv")
head(volcanes)
str(volcanes)
summary(volcanes$Elevation..Meters.)
```

# Visualización básica con ggplot2

```{r}
library(ggplot2)

# Histograma de elevación de volcanes
ggplot(volcanes, aes(x = Elevation..Meters.)) +
  geom_histogram(bins = 30, fill = "darkred", color = "white") +
  labs(title = "Elevación de volcanes del Holoceno", x = "Elevación (m)", y = "Frecuencia")
```
